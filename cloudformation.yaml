Resources:
  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for the EC2 instance'
      VpcId: 'vpc-0e60e13744cc2810d'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-00b1c9efd33fda707
      InstanceType: t2.micro
      KeyName: sm703_ec2
      SecurityGroupIds:
        - !GetAtt MySecurityGroup.GroupId
      IamInstanceProfile: !Ref MyInstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y java-11-openjdk-devel
          aws s3 cp s3://aws-codedeploy-${AWS::Region}/latest/install . --region ${AWS::Region}
          chmod +x ./install
          ./install auto
  

  MyInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: "/"
      Roles:
        - !Ref MyInstanceRole

  CodeDeployServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "CodeDeployServiceRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "CodeDeployAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "ec2:Describe*"
                  - "autoscaling:Describe*"
                Resource: "*"



  MyLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Subnets:
        - subnet-0ae18efa83580a717
        - subnet-0fd560c0c6a0c389d
        - subnet-023390976852144c4
      SecurityGroups:
        - !GetAtt MySecurityGroup.GroupId
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 8080
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:8080/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      Instances:
        - !Ref MyEC2Instance

  MyBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: term-project-bucket

  MyApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: 'Server'

  MyDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref MyApplication
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: 'CodeDeployDefault.OneAtATime'
      DeploymentStyle:
        DeploymentType: 'IN_PLACE'
        DeploymentOption: 'WITHOUT_TRAFFIC_CONTROL'
      Ec2TagFilters:
        - Key: 'Name'
          Value: 'MyEC2Instance'
          Type: 'KEY_AND_VALUE'
      AutoRollbackConfiguration:
        Enabled: true
        Events: [ 'DEPLOYMENT_FAILURE', 'DEPLOYMENT_STOP_ON_ALARM', 'DEPLOYMENT_STOP_ON_REQUEST' ]
